#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app')
const debug = require('debug')('test:server')
const http = require('http')
const { Server } = require('socket.io')
const { instrument } = require('@socket.io/admin-ui')
const CommentModel = require('../model/Comment')

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '8080')
app.set('port', port)

/**
 * Create HTTP server.
 */

const server = http.createServer(app)

/**
 *  create instance io
 */

const io = new Server(server, {
    cors: {
        origin: [
            'http://localhost:5173',
            'https://admin.socket.io',
            'https://avatar-lan-au-75.vercel.app',
            'https://avatar-git-main-lan-au-75.vercel.app',
            'https://avatar-red.vercel.app',
        ],
        credentials: true,
    },
})

// Hàm đệ quy để xóa các comment con của một comment cha
const deleteChildComments = async function (commentId) {
    // Tìm các comment con của comment cha
    const children = await CommentModel.find({ parentId: commentId })

    // Nếu có comment con, thực hiện đệ quy để xóa các comment con của chúng
    if (children.length > 0) {
        for (const child of children) {
            await deleteChildComments(child._id) // Đệ quy xóa các comment con
        }
    }

    // Xóa comment hiện tại
    await CommentModel.findByIdAndDelete(commentId)
}

// Xóa comment cha và các comment con liên quan
const deleteCommentAndChildComments = async function (commentId) {
    // Gọi hàm đệ quy để xóa các comment con của comment cha
    await deleteChildComments(commentId)

    // Xóa comment cha
    await CommentModel.findByIdAndDelete(commentId)
}

// Comment real time
io.on('connection', (socket) => {
    console.log('user connected')

    // retrieve all comments in  database

    socket.on('join-room-comment', async (room) => {
        console.log(`User joined room ${room}`)
        socket.join(room)

        // retrieve all comments from database and send them to client
        CommentModel.find({ room: room }).then((comments) => {
            comments.forEach((data) => {
                socket.emit('receive-comment', data)
            })
        })
    })

    socket.on('send-comment', async (data) => {
        const comment = new CommentModel(data)

        const newData = await comment.save()

        io.to(newData.room).emit('receive-comment', newData)
    })

    socket.on('createReply', async (reply) => {
        const comment = new CommentModel(reply)

        const newData = await comment.save()

        io.to(reply.room).emit('newReply', newData)
    })

    socket.on('update-comment', async (data) => {
        try {
            const updatedData = await CommentModel.findOneAndUpdate(
                { _id: data._id },
                { $set: { message: data.message } },
                { new: true }
            )
            io.to(data.room).emit('replace-comment', updatedData)
        } catch (error) {
            console.log(error)
        }
    })

    socket.on('delete-comment', async (data) => {
        await deleteCommentAndChildComments(data._id)
        io.to(data.room).emit('response-comment', { _id: data._id })
    })

    socket.on('like-comment', async ({ comment, like }) => {
        const newComment = await CommentModel.findOne({ _id: comment._id })

        if (like) {
            newComment.like += 1
        } else {
            newComment.like -= 1
        }

        await newComment.save()

        io.to(comment.room).emit('update-like-comment', { comment: newComment, like })
    })

    socket.on('leave-room-comment', (room) => {
        console.log(`User left room ${room}`)
        socket.leave(room)
    })

    socket.on('disconnect', () => {
        console.log('Client disconnected')
    })
})

instrument(io, {
    auth: false,
    mode: 'development',
})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10)

    if (isNaN(port)) {
        // named pipe
        return val
    }

    if (port >= 0) {
        // port number
        return port
    }

    return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error
    }

    const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges')
            process.exit(1)
        case 'EADDRINUSE':
            console.error(bind + ' is already in use')
            process.exit(1)
        default:
            throw error
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address()
    const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
    debug('Listening on ' + bind)
}
